/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "libavcodec/audioconvert.h"
#include "libavutil/fifo.h"
#include "libavformat/avformat.h"
/* Header for class com_v2soft_spoiq_ffmpeg_core_FFMPEG */

#ifndef _Included_com_v2soft_spoiq_ffmpeg_core_FFMPEG
#define _Included_com_v2soft_spoiq_ffmpeg_core_FFMPEG
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_avcodec_register_all
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1avcodec_1register_1all
  (JNIEnv *, jobject);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_register_all
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1register_1all
  (JNIEnv *, jobject);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_init
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1init
  (JNIEnv *, jobject);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_setInputFile
 * Signature: (Ljava/lang/String;)Lcom/v2soft/spoiq/ffmpeg/core/FFMPEGAVFormatContext;
 */
JNIEXPORT jobject JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1setInputFile
  (JNIEnv *, jobject, jstring);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_setOutputFile
 * Signature: (Ljava/lang/String;)Lcom/v2soft/spoiq/ffmpeg/core/FFMPEGAVFormatContext;
 */
JNIEXPORT jobject JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1setOutputFile
  (JNIEnv *, jobject, jstring);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_setBitrate
 * Signature: (Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1setBitrate
  (JNIEnv *, jobject, jstring, jstring);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_newVideoStream
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1newVideoStream
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_setAudioRate
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1setAudioRate
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_setAudioChannels
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1setAudioChannels
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_setVideoChannel
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1setVideoChannel
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_setFrameRate
 * Signature: (I)Lcom/v2soft/spoiq/ffmpeg/core/FFMPEGAVRational;
 */
JNIEXPORT jobject JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1setFrameRate
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_setFrameAspectRatio
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1setFrameAspectRatio
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_setVideoCodec
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1setVideoCodec
  (JNIEnv *, jobject, jstring);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_setFrameSize
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1setFrameSize
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_parse_options
 * Signature: ([Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1parse_1options
  (JNIEnv *, jobject, jobjectArray);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_convert
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1convert
  (JNIEnv *, jobject);

/*
 * Class:     com_v2soft_spoiq_ffmpeg_core_FFMPEG
 * Method:    native_av_release
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_v2soft_spoiq_ffmpeg_core_FFMPEG_native_1av_1release
  (JNIEnv *, jobject, jint);

typedef struct {
    int file_index;
    int stream_index;
    int sync_file_index;
    int sync_stream_index;
} AVStreamMap;

#define MAX_FILES 10

struct AVInputStream;

typedef struct AVOutputStream {
    int file_index;          /* file index */
    int index;               /* stream index in the output file */
    int source_index;        /* AVInputStream index */
    AVStream *st;            /* stream in the output file */
    int encoding_needed;     /* true if encoding needed for this stream */
    int frame_number;
    /* input pts and corresponding output pts
     for A/V sync */
    //double sync_ipts;        /* dts from the AVPacket of the demuxer in second units */
    struct AVInputStream *sync_ist; /* input stream to sync against */
    int64_t sync_opts;       /* output frame counter, could be changed to some true timestamp */ //FIXME look at frame_number
    /* video only */
    int video_resample;
    AVFrame pict_tmp;      /* temporary image for resampling */
    struct SwsContext *img_resample_ctx; /* for image resampling */
    int resample_height;
    int resample_width;
    int resample_pix_fmt;

    /* full frame size of first frame */
    int original_height;
    int original_width;

    /* cropping area sizes */
    int video_crop;
    int topBand;
    int bottomBand;
    int leftBand;
    int rightBand;

    /* cropping area of first frame */
    int original_topBand;
    int original_bottomBand;
    int original_leftBand;
    int original_rightBand;

    /* audio only */
    int audio_resample;
    ReSampleContext *resample; /* for audio resampling */
    int reformat_pair;
    AVAudioConvert *reformat_ctx;
    AVFifoBuffer *fifo;     /* for compression: one audio fifo per codec */
    FILE *logfile;
} AVOutputStream;

typedef struct AVInputStream {
    int file_index;
    int index;
    AVStream *st;
    int discard;             /* true if stream data should be discarded */
    int decoding_needed;     /* true if the packets must be decoded in 'raw_fifo' */
    int64_t sample_index;      /* current sample */

    int64_t       start;     /* time when read started */
    int64_t       next_pts;  /* synthetic pts for cases where pkt.pts
                              is not defined */
    int64_t       pts;       /* current pts */
    int is_start;            /* is 1 at the start and after a discontinuity */
    int showed_multi_packet_warning;
    int is_past_recording_time;
#if CONFIG_AVFILTER
    AVFilterContext *out_video_filter;
    AVFilterContext *input_video_filter;
    AVFrame *filter_frame;
    int has_filter_frame;
    AVFilterPicRef *picref;
#endif
} AVInputStream;

typedef struct AVInputFile {
    int eof_reached;      /* true if eof reached */
    int ist_index;        /* index of first stream in ist_table */
    int buffer_size;      /* current total buffer size */
    int nb_streams;       /* nb streams we are aware of */
} AVInputFile;

#ifdef __cplusplus
}
#endif
#endif
